AWSTemplateFormatVersion: "2010-09-09"
Description: cloudformation for vpc

Resources:
  # MY VPC
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '172.16.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  # AZ-1

  # PublicSubnet1A In AZ-1
  PublicSubnet1A:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '172.16.1.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet1A

  # AppPrivateSubnet1A In AZ-1
  AppPrivateSubnet1A:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '172.16.2.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: AppPrivateSubnet1A

  # DataPrivateSubnet1B In AZ-1
  DataPrivateSubnet1B:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '172.16.3.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: DataPrivateSubnet1B

  # AZ-2

  # PublicSubnet2A In AZ-2
  PublicSubnet2A:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '172.16.4.0/24'
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet2A

  # AppPrivateSubnet2B In AZ-2 
  AppPrivateSubnet2B:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '172.16.5.0/24'
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: AppPrivateSubnet2B

  # DataPrivateSubnet2B In AZ-2
  DataPrivateSubnet2B:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '172.16.6.0/24'
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: DataPrivateSubnet2B


  #INTERNET GATEWAY IGW
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: MyVPC-IGW

  #ATTACH GATEWAY IGW TO VPC
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  #route table:
  PublicRouteTable:
   Type: 'AWS::EC2::RouteTable'
   Properties:
     VpcId: !Ref MyVPC
     Tags:
       - Key: Name
         Value: PublicRouteTable

#public route
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

#PublicSubnet1ARouteTableAssociation: 
  PublicSubnet1ARouteTableAssociation:
   Type: 'AWS::EC2::SubnetRouteTableAssociation'
   Properties:
     SubnetId: !Ref PublicSubnet1A
     RouteTableId: !Ref PublicRouteTable

  
  #Bastion Host EC2
  BastionHost:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      KeyName: bastionhost
      ImageId: ami-0453ec754f44f9a4a
      SubnetId: !Ref PublicSubnet1A
      SecurityGroupIds:
        - !Ref BastionSG
      Tags:
       - Key: Name
         Value: BastionHost
           



  # Bastion security group
  BastionSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Enable SSH access'
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp   # Corrected from TpProtocol to IpProtocol
          FromPort: 22
          ToPort: 22
          CidrIp: #######  # Replace with a specific IP range for better security


        
   # AppInstance1A (EC2 Instance)
  AppInstance1A:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      KeyName: !Ref bastionhost
      ImageId: ami-0453ec754f44f9a4a
      SubnetId: !Ref AppPrivateSubnet1A
      SecurityGroupIds:
        - !Ref AppInstance1ASG
      Tags:
        - Key: Name
          Value: App1

  # AppInstance2B (EC2 Instance)
  AppInstance2B:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0453ec754f44f9a4a
      SubnetId: !Ref AppPrivateSubnet2B
      SecurityGroupIds:
        - !Ref AppInstance2BSG
      Tags:
        - Key: Name
          Value: App2

  # AppInstance1ASG (Security Group for AppInstance1A)
  AppInstance1ASG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Allow SSH FROM Bastion'
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSG

  # AppInstance2BSG (Security Group for AppInstance2B)
  AppInstance2BSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Allow ICMP Ping From App1'
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: ICMP
          FromPort: -1
          ToPort: -1
          SourceSecurityGroupId: !Ref AppInstance1ASG
